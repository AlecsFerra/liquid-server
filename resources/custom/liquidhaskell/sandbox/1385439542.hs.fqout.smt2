(define-sort Elt () Int)
(define-sort Set () (Array Elt Bool))
(define-fun smt_set_emp () Set ((as const Set) false))
(define-fun smt_set_mem ((x Elt) (s Set)) Bool (select s x))
(define-fun smt_set_add ((s Set) (x Elt)) Set (store s x true))
(define-fun smt_set_cup ((s1 Set) (s2 Set)) Set ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 Set) (s2 Set)) Set ((_ map and) s1 s2))
(define-fun smt_set_com ((s Set)) Set ((_ map not) s))
(define-fun smt_set_dif ((s1 Set) (s2 Set)) Set (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 Set) (s2 Set)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(declare-fun z3v57 () Int)
(declare-fun z3f58 (Int) Int)
(declare-fun z3v59 () Int)
(declare-fun z3v60 () Int)
(declare-fun z3v61 () Int)
(declare-fun z3v62 () Int)
(push 1)
(assert (= z3v62 12))
(assert (and (= (z3f58 z3v57) z3v57) (= (z3f58 z3v59) z3v59) (= (z3f58 z3v60) z3v60) (>= z3v61 0)))
(push 1)
(assert (not (>= z3v62 0)))
(check-sat)
(pop 1)
(pop 1)
